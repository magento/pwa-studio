// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a loading indicator when talon indicates 1`] = `
<div
  className="global"
>
  <span
    className="root"
  >
    <svg
      className="icon"
      fill="none"
      height={64}
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      viewBox="0 0 24 24"
      width={64}
      xmlns="http://www.w3.org/2000/svg"
    >
      <line
        x1="12"
        x2="12"
        y1="2"
        y2="6"
      />
      <line
        x1="12"
        x2="12"
        y1="18"
        y2="22"
      />
      <line
        x1="4.93"
        x2="7.76"
        y1="4.93"
        y2="7.76"
      />
      <line
        x1="16.24"
        x2="19.07"
        y1="16.24"
        y2="19.07"
      />
      <line
        x1="2"
        x2="6"
        y1="12"
        y2="12"
      />
      <line
        x1="18"
        x2="22"
        y1="12"
        y2="12"
      />
      <line
        x1="4.93"
        x2="7.76"
        y1="19.07"
        y2="16.24"
      />
      <line
        x1="16.24"
        x2="19.07"
        y1="7.76"
        y2="4.93"
      />
    </svg>
  </span>
  <span
    className="message"
  >
    <mock-FormattedMessage
      defaultMessage="Fetching Data..."
      id="loadingIndicator.message"
    />
  </span>
</div>
`;

exports[`renders components if cart has items 1`] = `
<div
  className="root"
>
  Title
  <div
    className="heading_container"
  >
    <h1
      className="heading"
    >
      <mock-FormattedMessage
        defaultMessage="Cart"
        id="cartPage.heading"
      />
    </h1>
    <div
      className="stockStatusMessageContainer"
    >
      <StockStatusMessage />
    </div>
  </div>
  <div
    className="body"
  >
    <div
      className="items_container"
    >
      <ProductListing
        onAddToWishlistSuccess={[MockFunction onAddToWishlistSuccess]}
        setIsCartUpdating={[MockFunction setIsCartUpdating]}
      />
    </div>
    <div
      className="price_adjustments_container"
    >
      <PriceAdjustments
        setIsCartUpdating={[MockFunction setIsCartUpdating]}
      />
    </div>
    <div
      className="summary_container"
    >
      <div
        className="summary_contents"
      >
        <PriceSummary
          isUpdating={false}
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`renders empty cart text (no adjustments, list or summary) if cart is empty 1`] = `
<div
  className="root"
>
  Title
  <div
    className="heading_container"
  >
    <h1
      className="heading"
    >
      <mock-FormattedMessage
        defaultMessage="Cart"
        id="cartPage.heading"
      />
    </h1>
    <div
      className="stockStatusMessageContainer"
    >
      <StockStatusMessage />
    </div>
  </div>
  <div
    className="body"
  >
    <div
      className="items_container"
    >
      <h3>
        <mock-FormattedMessage
          defaultMessage="There are no items in your cart."
          id="cartPage.emptyCart"
        />
      </h3>
    </div>
    <div
      className="price_adjustments_container"
    />
    <div
      className="summary_container"
    >
      <div
        className="summary_contents"
      />
    </div>
  </div>
</div>
`;
